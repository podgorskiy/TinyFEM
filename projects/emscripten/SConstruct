import os
import sys
import zlib
import fnmatch
import subprocess
import tempfile
import re
import shutil
import platform
import zipfile
import time
import struct
import shutil

sys.path.append(os.path.abspath('../tools/pyscripts'))
sys.path.append(os.path.abspath('../tools/VersionUpdater'))

import atexit
import colorama
from SCons.Script import GetBuildFailures
from colorama import Fore, Back, Style
from glob import glob

# --------------------------------------------------------------------------------------------------------------------
def PrintInformationOnBuildIsFinished(startTimeInSeconds):
    """ Launched when scons is finished """
    failures = GetBuildFailures()
    for failure in failures:
        print Style.BRIGHT + Fore.RED + "Target [%s] failed: %s" % (failure.node, failure.errstr) + Style.RESET_ALL
    timeDelta = time.gmtime(time.time() - startTimeInSeconds)
    print Style.BRIGHT + Fore.GREEN + time.strftime("Build time: %M minutes %S seconds", timeDelta) + Style.RESET_ALL

def Emcc(target, source, env):
    syscmd = 'emcc -o' + target[0]
    for f in sources:
        syscmd += ' ' + f + ' '
    print syscmd
    popen(syscmd)
	
def main():
    colorama.init()
    timeStart = time.time()
    atexit.register(PrintInformationOnBuildIsFinished, timeStart)
    if sys.platform == 'win32':
        env = Environment(ENV=os.environ)
        env['SPAWN'] = __spawn
    else:
        env = Environment(ENV=os.environ)
    
    
    env.Append(BUILDERS = {'Emcc': Builder( 
                                        action = Action(Emcc)
                                        ) })
                                        
    sources = [Glob('../../sources/*.cpp')]
    for f in sources[0]:
        print f
    env.Program("../../bin/fem.exe", sources)
    
        
# --------------------------------------------------------------------------------------------------------------------
# needed for win32 only to avoid 'The command line is too long' error
def __spawn(sh, escape, cmd, args, env):    
    newargs = ' '.join(args[1:])
    cmdline = cmd + " " + newargs
    startupinfo = subprocess.STARTUPINFO()
    startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
    proc = subprocess.Popen(cmdline,
                            stdin = subprocess.PIPE,
                            stdout = subprocess.PIPE,
                            stderr = subprocess.PIPE,
                            startupinfo = startupinfo,
                            shell = False, env = os.environ)
    data, err = proc.communicate()
    rv = proc.wait()
    if rv:
		if err.lower().find( 'warning' ) == -1 :
			logger.PrintError( err )
		else:
			logger.PrintWarning( err )
    return rv

#def print_cmd_line(s, target, src, env):
#    #print '%s %s => %s' % ( s, src, target)
#    print s

def popen(cmdline):
    proc = subprocess.Popen(cmdline,
                            stdin = subprocess.PIPE, 
                            stdout = subprocess.PIPE,
                            stderr = subprocess.PIPE,
                            shell = True, env = os.environ)
    data, err = proc.communicate()
    if err:
		str = err + os.linesep + cmdline
		if err.lower().find( 'warning' ) == -1 :
			logger.PrintError( str )
		else:
			logger.PrintWarning( str )
    return data.strip()

    
if __name__ == "SCons.Script":
    main()